package com.dumbpug.dungeony.session.level;

import java.util.ArrayList;
import com.dumbpug.dungeony.Constants;
import com.dumbpug.dungeony.session.character.enemy.Enemies;
import com.dumbpug.dungeony.session.character.enemy.Enemy;
import com.dumbpug.dungeony.session.character.enemy.EnemyFactory;
import com.dumbpug.dungeony.session.character.enemy.EnemyType;
import com.dumbpug.dungeony.session.events.SessionEventQueue;
import com.dumbpug.dungeony.session.level.grid.SpatialGrid;
import com.dumbpug.dungeony.session.level.tile.Tile;
import com.dumbpug.dungeony.session.level.tile.TileFactory;
import com.dumbpug.dungeony.session.level.tile.Tiles;
import dungen.DunGen;
import dungen.DunGenConfiguration;
import dungen.Dungeon;
import dungen.tile.Entity;
import dungen.tile.ITileDetails;

/**
 * Factory for creating Level instances.
 */
public class LevelFactory {
	
	/**
	 * Create a Level instance.
	 * @param seed The seed to use in level generation.
	 * @param depth The level depth.
	 * @param sessionEventQueue The session event queue.
	 * @return A Level instance.
	 */
	public static Level createLevel(long seed, int depth, SessionEventQueue sessionEventQueue) {
		// Create the spatial grid that will be used to process collisions between level entities.
		SpatialGrid<ICollidableEntity> levelSpatialGrid = new SpatialGrid<ICollidableEntity>(Constants.LEVEL_SPATIAL_GRID_CELL_SIZE);
		
		// Create a new DunGen configuration and set the provided seed.
		DunGenConfiguration configuration = new dungen.DunGenConfiguration();
		configuration.seed                = seed;
		
		// Get the room resources directory to use in generating a dungeon based on the level depth.
		String roomResourcesDirectory = getRoomResourcesDirectoryForDepth(depth);
		
		// Generate the dungeon!
		Dungeon dungeon = DunGen.generate(roomResourcesDirectory, configuration);
		
		// Create the level tiles.
		Tiles tiles = createLevelTiles(dungeon, levelSpatialGrid);
		
		// Create the level enemies.
		Enemies enemies = createLevelEnemies(dungeon, levelSpatialGrid);
		
		// Create and return the actual level.
		return new Level(sessionEventQueue, tiles, enemies, levelSpatialGrid, depth);
	}
	
	/**
	 * Create the collection of tiles that the level is composed of.
	 * @param dungeon The generated dungeon to source the tiles from.
	 * @param spatialGrid The spatial grid used to handle collisions between level entities.
	 * @return The collection of tiles that the level is composed of.
	 */
	private static Tiles createLevelTiles(Dungeon dungeon, SpatialGrid<ICollidableEntity> levelSpatialGrid) {
		// Create the list to hold level tile entities.
		ArrayList<Tile> levelTiles = new ArrayList<Tile>();
		
		// Populate the 'levelTiles' collection based on the tiles generated by the DunGen tool.
		for (ITileDetails generatedTile : dungeon.getTiles()) {
			// Create the tile.
			Tile tile = TileFactory.createTile(generatedTile);
			
			// Add the tile to the level spatial grid.
			levelSpatialGrid.add(tile);
			
			// Add the tiel to the list of level tiles.
			levelTiles.add(tile);
		}
		
		// Return the tiles collection.
		return new Tiles(levelTiles);
	}
	
	/**
	 * Create the collection of enemies present in the level.
	 * @param dungeon The generated dungeon to source the enemies from.
	 * @param spatialGrid The spatial grid used to handle collisions between level entities.
	 * @return The collection of enemies present in the level.
	 */
	private static Enemies createLevelEnemies(Dungeon dungeon, SpatialGrid<ICollidableEntity> levelSpatialGrid) {
		// Create the list to hold level enemies.
		ArrayList<Enemy> levelEnemies = new ArrayList<Enemy>();
		
		// Any of the entities attached to any generated tile could be an enemy.
		for (ITileDetails generatedTile : dungeon.getTiles()) {
			for (Entity entity : generatedTile.getEntities()) {
				// Is the entity an enemy?
				if (EnemyType.hasType(entity.getId())) {
					// Get the type of the enemy.
					EnemyType enemyType = EnemyType.valueOf(entity.getId());
					
					// Create the enemy.
					Enemy enemy = EnemyFactory.createEnemy(enemyType, generatedTile.getX(), generatedTile.getY(), getDirection(entity.getFacingDirection()));
					
					// Add the enemy to the level spatial grid.
					levelSpatialGrid.add(enemy);
					
					// Create and add the decoration to the list of decorations for the current tile.
					levelEnemies.add(enemy);
				}
			}
		}
		
		// Return the enemies collection.
		return new Enemies(levelEnemies);
	}
	
	/**
	 * Gets the room resources directory to use based on the level depth.
	 * @param depth The level depth
	 * @return The room resources directory to use based on the level depth.
	 */
	private static String getRoomResourcesDirectoryForDepth(int depth) {
		if (depth == 0) {
			return "rooms/first";
		} else if (depth <= 3) {
			return "rooms/very_easy";
		} else if (depth <= 6) {
			return "rooms/easy";
		} else if (depth <= 10) {
			return "rooms/normal";
		} else if (depth <= 14) {
			return "rooms/hard";
		} else if (depth <= 18) {
			return "rooms/very_hard";
		} else {
			return "rooms/super_hard";
		}
	}
	
	/**
	 * Get the direction based on the generated direction type.
	 * @param value The generated direction type.
	 * @return The direction based on the generated direction type.
	 */
	public static Direction getDirection(dungen.Direction value) {
		switch (value) {
			case EAST:
				return Direction.EAST;
			case NORTH:
				return Direction.NORTH;
			case SOUTH:
				return Direction.SOUTH;
			case WEST:
				return Direction.WEST;
			case UNKNOWN:
			default:
				return Direction.NORTH;
		}
	}
}
